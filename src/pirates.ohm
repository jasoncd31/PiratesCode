PiratesCode {
  Program      = Statement+

  Statement    = print Exp              --print
               | VarDec
               | FunDec
               | Assignment
               | LoopStatement
               | IfStmt
               | Return           
               | break          
               | comment
               | Call
               
  VarDec       = (type | var) id "=" Exp

  FunDec       = function id Params Block 

  Assignment   = id "=" Exp
  
  ArrayLit	= "[" ListOf<Exp, ","> "]"

  MapLit      = "{" ListOf<MapEntry, ","> "}"
  MapEntry    = Exp ":" Exp

  Return       = return Exp 		--exp
               | return                 

  LoopStatement = while Exp Block 							   -- while
               | for (type|"vargh") id "through" id Block           -- ForEach
               | for ("vargh"|"int") id "=" Exp "until" Exp Block   -- For

  IfStmt      = if Exp Block else (Block | IfStmt)            --long
              | if Exp Block                                  --short
  
  Params       = "(" ListOf<id, ","> ")"

  Block        = "{" Statement* "}"

  /* ClassBlock   = "{" ConstructorDec MethodDec* "}" 

  ConstructorDec = construct Params "{" Exp* "}"

  MethodDec    = function id Params Block */

  Exp     = ("-" | "not") Exp                   -- unary
          | Exp0 "?" Exp0 ":" Exp               -- ternary
          | Exp0
  Exp0    = Exp0 or Exp1                        -- binary
  	      | Exp1
  Exp1    = Exp1 and Exp2                       --binary               
          | Exp2
  Exp2    = Exp3 relop Exp3                     -- binary
          | Exp3
  Exp3    = Exp3 ("+" | "-") Exp4               -- binary
          | Exp4
  Exp4    = Exp4 ("*"|"/"|"%") Exp5             -- binary
          | Exp5
  Exp5    = Exp6 "**" Exp5                      -- binary
          | Exp6
  Exp6    = this ("." id)+ "=" Exp                 -- assignprop
  	     | GetProperty
          | num
          | true
          | false
          | ArrayLit
          | MapLit
          | Call
          | id "=" Exp                          -- assign
          | id
          | "(" Exp ")"                         -- parens
          | strlit ~keyword           
       
  num     = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  relop   = "<=" | "<" | "!=" | "==" | ">=" | ">"

  GetProperty = this ("." (id | Call))+

  Call    = id "(" ListOf<Exp, ","> ")"
          
  let         = "vargh" ~alnum
  print       = "ahoy" ~alnum
  function    = "captain" ~alnum
  if          = "yo" ~alnum
  elseif      = "yo ho" ~alnum
  else        = "yo ho ho" ~alnum
  while       = "parrot" ~alnum
  repeat      = "repeat" ~alnum
  for         = "chase" ~alnum
  return      = "anchor" ~alnum
  true        = "ay" ~alnum
  false       = "nay" ~alnum
  class       = "ship" ~alnum
  break       = "maroon" ~alnum
  this        = "me" ~alnum
  construct   = "build" ~alnum
  and         = "and" ~alnum
  or          = "or" ~alnum
  var         = "vargh" ~alnum
  
  comment     = "$$" (~"\n" any)* ("\n" | end)  --comment

  type        = ("booty"|"shanty"|"int"|"doubloon"|"loot"|"map"|"chest"|"ledger") ~alnum

  id          = ~keyword letter alnum*
 
  keyword     = let | print | function | else | elseif | if | while | repeat
              | for | break | return | true | false | type | this          
              
  /*strlit      = ("\"" | "\'") char* ("~" applySyntactic<Exp> "~" char*)* ("\"" | "\'")*/
  strlit        = "\"" char* "\""
              
  char        = ~"\\" ~"\"" ~"\n" ~"~" any
  
 
} 