PiratesCode {
  Program = Stmt+
  Stmt = print Exp                    -- print
       | (type|"vargh") id "=" Exp    -- vardec
       | id "=" Exp                   -- assignment
       | while Exp Block              -- while
       | ForEachLoop
       | ForLoop
       | function id Params Block     --fundec
       | class id ClassBlock          --classdec
       | return Exp                   --return
       | IfStmt
       | break
       | comment
  
  IfStmt = if Exp Block (elseif Exp Block)* (else Block)?
  ForEachLoop = for (type|"vargh") id "through" id Block
  ForLoop = for ("vargh"|"int") id "=" Exp "until" Exp Block
  
  Params = "(" ListOf<id, ","> ")"
  Args   = "(" ListOf<Exp, ","> ")"
  Block = "{" Stmt* "}"
  ClassBlock = "{" ConstructorDec MethodDec* "}"   
  ConstructorDec = construct Params "{" Exp* "}"    --constructor
  MethodDec =  function id Params Block             --method
  

  Exp  = Exp0 "?" Exp0 ":" Exp         -- ternary
       | Exp0
  Exp0 = Exp0 (and|or) Exp1            --binary
  	   |Exp1
  Exp1 = Exp2 relop Exp2               -- binary
       | Exp2
  Exp2 = Exp2 ("+" | "-") Exp3         -- binary
       | Exp3
  Exp3 = Exp3 ("*"|"/"|"%") Exp4       -- binary
       | Exp4
  Exp4 = Exp5 "**" Exp4                -- binary
       | Exp5
  Exp5 = num
       | id Args                   -- call
       | id "=" Exp                --assign
       | id
       | "(" Exp ")"               -- parens
 	   | strlit ~keyword           
       | Exp6
  Exp6 = GetProperty "=" Exp       --assign
  		| GetProperty              --get
       
  num   = ("-")? digit+ ("." digit+)? (("E"|"e") ("+"|"-")? digit+)?
  id    = ~keyword letter ("_" | letter | digit)*
  relop = "<=" | "<" | "!=" | "==" | ">=" | ">"
  GetProperty = this (AccessDot)+
  AccessDot = "." (id | Call)
  Call = id Params

  
  let         = "vargh" ~alnum
  print       = "ahoy" ~alnum
  function    = "captain" ~alnum
  if          = "yo" ~alnum
  elseif      = "yo ho" ~alnum
  else        = "yo ho ho" ~alnum
  while       = "parrot" ~alnum
  repeat      = "repeat" ~alnum
  for         = "chase" ~alnum
  return      = "anchor" ~alnum
  true        = "ay" ~alnum
  false       = "nay" ~alnum
  class       = "ship" ~alnum
  break       = "maroon" ~alnum
  this        = "me" ~alnum
  construct   = "build" ~alnum
  and         = "and" ~alnum
  or          = "or" ~alnum
  
  comment     = "$$" (~"\n" any)* "\n"
  type        = ("booty"|"shanty"|"int"|"doubloon"|"loot"|"map"|"chest"|"set"|"list") ~alnum
  
 
  keyword     = let | print | function | else | elseif | if | while | repeat
              | for | break | return | true | false | type | this
              
              
  strlit      = "\"" char* ("~" applySyntactic<Exp> "~" char*)* "\""     --expr1
  			  | "\'" char* ("~" applySyntactic<Exp>  "~" char* )* "\'"   --expr2
              
  char        = ~"\\" ~"\"" ~"\n" ~"~" any
}