PiratesCode {
  Program      = Statement+

  Statement    = print Exp              -- print
               | VarDec
               | FunDec
               | Assignment
               | LoopStatement
               | IfStmt
               | Return           
               | break          
               | comment
               | Call
               | ClassDec
               
         
  VarDec       = (type | var | id) id "=" Exp

  FunDec       = function id "(" ListOf<id, ","> ")" Block 

  Assignment   = id "=" Exp                  -- regular
               | (this|id) ("." id)+ "=" Exp    -- property
  
  ArrayLit    = "[" ListOf<Exp, ","> "]"

  MapLit      = "{" ListOf<MapEntry, ","> "}"
  MapEntry    = Exp ":" Exp

  Return      = return Exp 		--exp
              | return          --short             

  LoopStatement = while Exp Block 							   -- while
               | for (type|"vargh") id "through" id Block           -- ForEach
               | for ("vargh"|"int") id "=" Exp "until" Exp Block   -- For

  IfStmt      = if Exp Block (elseif Exp Block)* (else Block)?         -- long
              | if Exp Block                                           -- short
              
  Block        = "{" Statement* "}"
  
  ClassDec    = class id "{" ConstructorDec MethodDec* "}"

  ConstructorDec = construct "(" ListOf<id, ","> ")" Block

  MethodDec    = function id "(" ListOf<id, ","> ")" Block

  Exp     = ("-" | not) Exp                   -- unary
          | Exp0 "?" Exp0 ":" Exp               -- ternary
          | Exp0
  Exp0    = Exp0 or Exp1                        -- binary
  	  | Exp1
  Exp1    = Exp1 and Exp2                       -- binary               
          | Exp2
  Exp2    = Exp3 relop Exp3                     -- binary
          | Exp3
  Exp3    = Exp3 ("+" | "-") Exp4               -- binary
          | Exp4
  Exp4    = Exp4 ("*"|"/"|"%") Exp5             -- binary
          | Exp5
  Exp5    = Exp6 "**" Exp5                      -- binary
          | Exp6
  Exp6    = 
          | num
          | true
          | false
          | ArrayLit
          | MapLit
          | Call
          | NewInstance
          | id
          | "(" Exp ")"                         -- parens
          | strlit ~keyword           
       
  num     = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?

  relop   = "<=" | "<" | "!=" | "==" | ">=" | ">"

  Call    = id "(" ListOf<Exp, ","> ")"  -- regular
            | (this | id) ("." (Call | id))+  -- property
          
  let         = "vargh" ~alnum
  print       = "ahoy" ~alnum
  function    = "captain" ~alnum
  if          = "yo" ~alnum
  elseif      = "yo ho" ~alnum
  else        = "ho" ~alnum
  while       = "parrot" ~alnum
  repeat      = "repeat" ~alnum
  for         = "chase" ~alnum
  return      = "anchor" ~alnum
  true        = "aye" ~alnum
  false       = "nay" ~alnum
  class       = "ship" ~alnum
  break       = "maroon" ~alnum
  this        = "me" ~alnum
  construct   = "build" ~alnum
  and         = "and" ~alnum
  or          = "or" ~alnum
  not         = "not" ~alnum
  var         = "vargh" ~alnum
  new         = "new" ~alnum
  
  comment     = "$$" (~"\n" any)* ("\n" | end)  -- comment

  type        = ("booty"|"shanty"|"int"|"doubloon"|"loot"|"map"|"chest"|"ledger"|"none") ~alnum

  id          = ~keyword letter alnum*
 
  keyword     = let | print | function | else | elseif | if | while | repeat
              | for | break | return | true | false | type | this | new | construct | class          
              
  /*strlit      = ("\"" | "\'") char* ("~" applySyntactic<Exp> "~" char*)* ("\"" | "\'")*/
  strlit        = "\"" char* "\""
              
  char        = ~"\\" ~"\"" ~"\n" ~"~" any
  NewInstance = new id "(" ListOf<Exp, ","> ")"

 
} 