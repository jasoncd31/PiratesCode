PiratesCode {
  Program      = Statement+

  Statement    = print Exp              -- print
               | VarDec
               | FunDec
               | Assignment
               | LoopStatement
               | IfStmt
               | Return           
               | break          
               | comment
               | Call
               | ClassDec
               | DotExpression
               | DotCall
                   
  VarDec       = (Type | var) id "=" Exp

  FunDec       = function id "(" ListOf<Param, ","> ")" "->" Type Block
  
  Param        = Type id

  Assignment   = Exp6 "=" Exp                  -- regular

  Return      = return Exp 		--exp
              | return          --short     
              
  Call        = id "(" ListOf<Exp, ","> ")"  -- regular
               
  DotExpression  = this "." id

  DotCall  = id "." Call 
  
  LoopStatement = while Exp Block 				     -- while
               | for (Type|"vargh") id "through" id Block           -- ForEach
               | for ("vargh"|"int") id "=" Exp "until" Exp Block   -- For

  IfStmt      = if Exp Block (elseif Exp Block)* (else Block)?         -- long
              | if Exp Block                                           -- short
              
  Block        = "{" Statement* "}"
  
  ClassDec    = class id "{" ConstructorDec MethodDeclaration* "}"

  ConstructorDec = construct "(" ListOf<Param, ","> ")" "{" Field* "}"
  
  Field       =  Type this "." id "=" Exp   

  MethodDeclaration    = function id "(" ListOf<Param, ","> ")" "->" Type Block
  Exp     = Exp0 "?" Exp0 ":" Exp               -- ternary
          | Exp0
  Exp0    = Exp0 or Exp1                        -- binary
  	      | Exp1
  Exp1    = Exp1 and Exp2                       -- binary               
          | Exp2
  Exp2    = Exp3 relop Exp3                     -- binary
          | Exp3
  Exp3    = Exp3 ("+" | "-") Exp4               -- binary
          | Exp4
  Exp4    = Exp4 ("*"|"/"|"%") Exp5             -- binary
          | Exp5
  Exp5    = Exp6 "**" Exp5                      -- binary
          | ("-" | not) Exp6                    -- unary
          | Exp6
  Exp6    = 
          | doublelit
          | intlit
          | true
          | false
          | ArrayLit
          | MapLit
          | Call
          | DotExpression
          | DotCall
          | ObjectDec
          | Exp6 "[" Exp "]"			-- subscript
          | id
          | "(" Exp ")"                         -- parens
          | strlit  


  Type 	        = "[" Type "]"		-- list
  		| "{" Type "," Type "}" 	-- dictionary
  		| id				-- id

  ArrayLit      = "[" ListOf<Exp, ","> "]"
  
  MapLit        = "{" ListOf<MapEntry, ","> "}"
  MapEntry      = Exp6 ":" Exp

  intlit        = digit+
  doublelit     = digit+ "." digit+ (("E" | "e") ("+" | "-")? digit+)?

  relop   = "<=" | "<" | "!=" | "==" | ">=" | ">"
          
  let         = "vargh" ~alnum
  print       = "ahoy" ~alnum
  function    = "captain" ~alnum
  if          = "yo" ~alnum
  elseif      = "yo ho" ~alnum
  else        = "ho" ~alnum
  while       = "parrot" ~alnum
  repeat      = "repeat" ~alnum
  for         = "chase" ~alnum
  return      = "anchor" ~alnum
  true        = "aye" ~alnum
  false       = "nay" ~alnum
  class       = "ship" ~alnum
  break       = "maroon" ~alnum
  this        = "me" ~alnum
  construct   = "build" ~alnum
  and         = "and" ~alnum
  or          = "or" ~alnum
  not         = "not" ~alnum
  var         = "vargh" ~alnum
  new         = "new" ~alnum
  
  comment     = "$$" (~"\n" any)* ("\n" | end)  -- comment

  id          = ~keyword letter alnum*
 
  keyword     = let | print | function | else | elseif | if | while | repeat
              | for | break | return | true | false | this | new | construct | class          
              
  /*strlit    = ("\"" | "\'") char* ("~" applySyntactic<Exp> "~" char*)* ("\"" | "\'")*/
  strlit      = "\"" char* "\""
              
  char        = ~"\\" ~"\"" ~"\n" ~"~" any
  ObjectDec      = new id "(" ListOf<Exp, ","> ")"

 
} 

